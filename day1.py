"""
    author : radicalrafi
    desc : solution code for adventofcode.com day 1

"""


def compare(a, b):
    "compares two numbers"

    return int(a) == int(b)

def redux(func, t):
    "redux runs f on bignumber + behavior"
    pos = 0
    total = 0

   
    bignumber = list(str(t))
   
    # we remove one so that i+1 lands in the last element
    idx = len(bignumber) - 1
    
    # remove the edgy case first
    if func(bignumber[idx], bignumber[0]):
        total += int(bignumber[idx])
    
    for i in range(idx):
        # part 1
        if func(bignumber[i], bignumber[i+1]):
            total += int(bignumber[i])
    

    return total


def part2(bignumber):
    
    data = list(str(bignumber))
    # convert i to a list of i as str
    # we nove have a list of n elements [1,2,3,4,5,6] 
    # for each element we look at element at index i+n/2 
    # so at i = 0 we look at i[0+6/2] but the problem is 
    # circularity we're not going to implement a circular list
    # let's instead use indices gymnastics and math 
    def mod_len_add(i,l):
        """
            modulo list length additon
            i index i
            j index ( i + len/2 ) % len
        """
        return (i+ (l/2)) % l

    total  = 0
    l = len(data)
    idx = len(data)  
    for i in range(idx) :
        
        if compare(data[i],data[int(mod_len_add(i,l))]) :
            total += int(data[i])

    return total


if __name__ == '__main__':


    TESTCASE1 = 1122
    TESTCASE2 = 1111
    TESTCASE3 = 1234
    TESTCASE4 = 91212129
    TESTCASE = 5672987533353956199629683941564528646262567117433461547747793928322958646779832484689174151918261551689221756165598898428736782194511627829355718493723961323272136452517987471351381881946883528248611611258656199812998632682668749683588515362946994415852337196718476219162124978836537348924591957188827929753417884942133844664636969742547717228255739959316351852731598292529837885992781815131876183578461135791315287135243541659853734343376618419952776165544829717676988897684141328138348382882699672957866146524759879236555935723655326743713542931693477824289283542468639522271643257212833248165391957686226311246517978319253977276663825479144321155712866946255992634876158822855382331452649953283788863248192338245943966269197421474555779135168637263279579842885347152287275679811576594376535226167894981226866222987522415785244875882556414956724976341627123557214837873872723618395529735349273241686548287549763993653379539445435319698825465289817663294436458194867278623978745981799283789237555242728291337538498616929817268211698649236646127899982839523784837752863458819965485149812959121884771849954723259365778151788719941888128618552455879369919511319735525621198185634342538848462461833332917986297445388515717463168515123732455576143447454835849565757773325367469763383757677938748319968971312267871619951657267913817242485559771582167295794259441256284168356292785568858527184122231262465193612127961685513913835274823892596923786613299747347259254823531262185328274367529265868856512185135329652635938373266759964119863494798222245536758792389789818646655287856173534479551364115976811459677123592747375296313667253413698823655218254168196162883437389718167743871216373164865426458794239496224858971694877159591215772938396827435289734165853975267521291574436567193473814247981877735223376964125359992555885137816647382139596646856417424617847981855532914872251686719394341764324395254556782277426326331441981737557262581762412544849689472281645835957667217384334435391572985228286537574388834835693416821419655967456137395465649249256572866516984318344482684936625486311718525523265165
    
    print(redux(compare,TESTCASE1))
    print(redux(compare,TESTCASE2))
    print(redux(compare,TESTCASE3))
    print(redux(compare,TESTCASE4))
    print(redux(compare,TESTCASE))
        
    TESTCASE1 = 1212
    TESTCASE2 = 1221
    TESTCASE3 = 123425
    TESTCASE4 = 123123
    TESTCASE5 = 12131415
    TESTCASE = 5672987533353956199629683941564528646262567117433461547747793928322958646779832484689174151918261551689221756165598898428736782194511627829355718493723961323272136452517987471351381881946883528248611611258656199812998632682668749683588515362946994415852337196718476219162124978836537348924591957188827929753417884942133844664636969742547717228255739959316351852731598292529837885992781815131876183578461135791315287135243541659853734343376618419952776165544829717676988897684141328138348382882699672957866146524759879236555935723655326743713542931693477824289283542468639522271643257212833248165391957686226311246517978319253977276663825479144321155712866946255992634876158822855382331452649953283788863248192338245943966269197421474555779135168637263279579842885347152287275679811576594376535226167894981226866222987522415785244875882556414956724976341627123557214837873872723618395529735349273241686548287549763993653379539445435319698825465289817663294436458194867278623978745981799283789237555242728291337538498616929817268211698649236646127899982839523784837752863458819965485149812959121884771849954723259365778151788719941888128618552455879369919511319735525621198185634342538848462461833332917986297445388515717463168515123732455576143447454835849565757773325367469763383757677938748319968971312267871619951657267913817242485559771582167295794259441256284168356292785568858527184122231262465193612127961685513913835274823892596923786613299747347259254823531262185328274367529265868856512185135329652635938373266759964119863494798222245536758792389789818646655287856173534479551364115976811459677123592747375296313667253413698823655218254168196162883437389718167743871216373164865426458794239496224858971694877159591215772938396827435289734165853975267521291574436567193473814247981877735223376964125359992555885137816647382139596646856417424617847981855532914872251686719394341764324395254556782277426326331441981737557262581762412544849689472281645835957667217384334435391572985228286537574388834835693416821419655967456137395465649249256572866516984318344482684936625486311718525523265165

    print(part2(TESTCASE1))
    print(part2(TESTCASE2))
    print(part2(TESTCASE3))
    print(part2(TESTCASE4))
    print(part2(TESTCASE5))
    print(part2(TESTCASE))
